// SPDX-License-Identifier: GPL-3.0-or-later
package cc.walle.neopgp;

public class NeoBrainpoolP256R1Key extends NeoECKey {
	private static final byte[] oid = {
		(byte)0x2b, (byte)0x24, (byte)0x03, (byte)0x03,
		(byte)0x02, (byte)0x08, (byte)0x01, (byte)0x01,
		(byte)0x07,
	};

	private static final short size = 256;

	private static final byte[] p = {
		(byte)0xa9, (byte)0xfb, (byte)0x57, (byte)0xdb,
		(byte)0xa1, (byte)0xee, (byte)0xa9, (byte)0xbc,
		(byte)0x3e, (byte)0x66, (byte)0x0a, (byte)0x90,
		(byte)0x9d, (byte)0x83, (byte)0x8d, (byte)0x72,
		(byte)0x6e, (byte)0x3b, (byte)0xf6, (byte)0x23,
		(byte)0xd5, (byte)0x26, (byte)0x20, (byte)0x28,
		(byte)0x20, (byte)0x13, (byte)0x48, (byte)0x1d,
		(byte)0x1f, (byte)0x6e, (byte)0x53, (byte)0x77,
	};

	private static final byte[] a = {
		(byte)0x7d, (byte)0x5a, (byte)0x09, (byte)0x75,
		(byte)0xfc, (byte)0x2c, (byte)0x30, (byte)0x57,
		(byte)0xee, (byte)0xf6, (byte)0x75, (byte)0x30,
		(byte)0x41, (byte)0x7a, (byte)0xff, (byte)0xe7,
		(byte)0xfb, (byte)0x80, (byte)0x55, (byte)0xc1,
		(byte)0x26, (byte)0xdc, (byte)0x5c, (byte)0x6c,
		(byte)0xe9, (byte)0x4a, (byte)0x4b, (byte)0x44,
		(byte)0xf3, (byte)0x30, (byte)0xb5, (byte)0xd9,
	};

	private static final byte[] b = {
		(byte)0x26, (byte)0xdc, (byte)0x5c, (byte)0x6c,
		(byte)0xe9, (byte)0x4a, (byte)0x4b, (byte)0x44,
		(byte)0xf3, (byte)0x30, (byte)0xb5, (byte)0xd9,
		(byte)0xbb, (byte)0xd7, (byte)0x7c, (byte)0xbf,
		(byte)0x95, (byte)0x84, (byte)0x16, (byte)0x29,
		(byte)0x5c, (byte)0xf7, (byte)0xe1, (byte)0xce,
		(byte)0x6b, (byte)0xcc, (byte)0xdc, (byte)0x18,
		(byte)0xff, (byte)0x8c, (byte)0x07, (byte)0xb6,
	};

	private static final byte[] G = {
		(byte)0x04, /* uncompressed raw */
		(byte)0x8b, (byte)0xd2, (byte)0xae, (byte)0xb9,
		(byte)0xcb, (byte)0x7e, (byte)0x57, (byte)0xcb,
		(byte)0x2c, (byte)0x4b, (byte)0x48, (byte)0x2f,
		(byte)0xfc, (byte)0x81, (byte)0xb7, (byte)0xaf,
		(byte)0xb9, (byte)0xde, (byte)0x27, (byte)0xe1,
		(byte)0xe3, (byte)0xbd, (byte)0x23, (byte)0xc2,
		(byte)0x3a, (byte)0x44, (byte)0x53, (byte)0xbd,
		(byte)0x9a, (byte)0xce, (byte)0x32, (byte)0x62,
		(byte)0x54, (byte)0x7e, (byte)0xf8, (byte)0x35,
		(byte)0xc3, (byte)0xda, (byte)0xc4, (byte)0xfd,
		(byte)0x97, (byte)0xf8, (byte)0x46, (byte)0x1a,
		(byte)0x14, (byte)0x61, (byte)0x1d, (byte)0xc9,
		(byte)0xc2, (byte)0x77, (byte)0x45, (byte)0x13,
		(byte)0x2d, (byte)0xed, (byte)0x8e, (byte)0x54,
		(byte)0x5c, (byte)0x1d, (byte)0x54, (byte)0xc7,
		(byte)0x2f, (byte)0x04, (byte)0x69, (byte)0x97,
	};

	private static final byte[] n = {
		(byte)0xa9, (byte)0xfb, (byte)0x57, (byte)0xdb,
		(byte)0xa1, (byte)0xee, (byte)0xa9, (byte)0xbc,
		(byte)0x3e, (byte)0x66, (byte)0x0a, (byte)0x90,
		(byte)0x9d, (byte)0x83, (byte)0x8d, (byte)0x71,
		(byte)0x8c, (byte)0x39, (byte)0x7a, (byte)0xa3,
		(byte)0xb5, (byte)0x61, (byte)0xa6, (byte)0xf7,
		(byte)0x90, (byte)0x1e, (byte)0x0e, (byte)0x82,
		(byte)0x97, (byte)0x48, (byte)0x56, (byte)0xa7,
	};

	private static final short k = 1;

	public NeoBrainpoolP256R1Key(byte keyRef) {
		super(keyRef, oid, size, p, a, b, G, n, k);
	};
}
